// stylelint-disable declaration-no-important

@use "sass:map";
@use "../modules/variables";
@import "../../../../node_modules/bootstrap/scss/functions";
@import "../../../../node_modules/bootstrap/scss/variables";

@mixin media-orientation($orientation, $orientations) {
    @if map.get($orientations, $orientation) {
        @media (orientation: map.get($orientations, $orientation)) {
            @content;
        }
    } @else {
        @content;
    }
}

// Margin and Padding

@each $orientation in map-keys(variables.$app-orientations) {
    @include media-orientation($orientation, variables.$app-orientations) {
        $infix: "-" + #{$orientation};

        @each $prop, $abbrev in (margin: m, padding: p) {
            @each $size, $length in variables.$spacers {
                .#{$abbrev}#{$infix}-#{$size} {
                    #{$prop}: $length !important;
                }
                .#{$abbrev}t#{$infix}-#{$size},
                .#{$abbrev}y#{$infix}-#{$size} {
                    #{$prop}-top: $length !important;
                }
                .#{$abbrev}r#{$infix}-#{$size},
                .#{$abbrev}x#{$infix}-#{$size} {
                    #{$prop}-right: $length !important;
                }
                .#{$abbrev}b#{$infix}-#{$size},
                .#{$abbrev}y#{$infix}-#{$size} {
                    #{$prop}-bottom: $length !important;
                }
                .#{$abbrev}l#{$infix}-#{$size},
                .#{$abbrev}x#{$infix}-#{$size} {
                    #{$prop}-left: $length !important;
                }
            }
        }

        // Negative margins (e.g., where `.mb-n1` is negative version of `.mb-1`)
        @each $size, $length in variables.$spacers {
            @if "#{$size}" != "0" {
                .m#{$infix}-n#{$size} {
                    margin: -$length !important;
                }
                .mt#{$infix}-n#{$size},
                .my#{$infix}-n#{$size} {
                    margin-top: -$length !important;
                }
                .mr#{$infix}-n#{$size},
                .mx#{$infix}-n#{$size} {
                    margin-right: -$length !important;
                }
                .mb#{$infix}-n#{$size},
                .my#{$infix}-n#{$size} {
                    margin-bottom: -$length !important;
                }
                .ml#{$infix}-n#{$size},
                .mx#{$infix}-n#{$size} {
                    margin-left: -$length !important;
                }
            }
        }

        // Some special margin utils
        .m#{$infix}-auto {
            margin: auto !important;
        }
        .mt#{$infix}-auto,
        .my#{$infix}-auto {
            margin-top: auto !important;
        }
        .mr#{$infix}-auto,
        .mx#{$infix}-auto {
            margin-right: auto !important;
        }
        .mb#{$infix}-auto,
        .my#{$infix}-auto {
            margin-bottom: auto !important;
        }
        .ml#{$infix}-auto,
        .mx#{$infix}-auto {
            margin-left: auto !important;
        }
    }
}

/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container($gutter: $grid-gutter-width) {
    width: 100%;
    padding-right: $gutter * 0.5;
    padding-left: $gutter * 0.5;
    margin-right: auto;
    margin-left: auto;
}

@mixin make-row($gutter: $grid-gutter-width) {
    display: flex;
    flex-wrap: wrap;
    margin-right: -$gutter * 0.5;
    margin-left: -$gutter * 0.5;
}

@mixin make-col-ready($gutter: $grid-gutter-width) {
    position: relative;
    // Prevent columns from becoming too narrow when at smaller grid tiers by
    // always setting `width: 100%;`. This works because we use `flex` values
    // later on to override this initial width.
    width: 100%;
    padding-right: $gutter * 0.5;
    padding-left: $gutter * 0.5;
}

@mixin make-col($size, $columns: $grid-columns) {
    flex: 0 0 percentage(divide($size, $columns));
    // Add a `max-width` to ensure content within each column does not blow out
    // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
    // do not appear to require this.
    max-width: percentage(divide($size, $columns));
}

@mixin make-col-auto() {
    flex: 0 0 auto;
    width: auto;
    max-width: 100%; // Reset earlier grid tiers
}

@mixin make-col-offset($size, $columns: $grid-columns) {
    $num: divide($size, $columns);
    margin-left: if($num == 0, 0, percentage($num));
}

// Row columns
//
// Specify on a parent element(e.g., .row) to force immediate children into NN
// numberof columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols($count) {
    > * {
        flex: 0 0 divide(100%, $count);
        max-width: divide(100%, $count);
    }
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns(
    $columns: $grid-columns,
    $gutter: $grid-gutter-width,
    $orientations: variables.$app-orientations
) {
    // Common properties for all orientations
    %grid-column {
        position: relative;
        width: 100%;
        padding-right: $gutter * 0.5;
        padding-left: $gutter * 0.5;
    }

    @each $orientation in map-keys($orientations) {
        $infix: #{"-" + $orientation};

        @if $columns > 0 {
            // Allow columns to stretch full width below their orientations
            @for $i from 1 through $columns {
                .col#{$infix}-#{$i} {
                    @extend %grid-column;
                }
            }
        }

        .col#{$infix},
        .col#{$infix}-auto {
            @extend %grid-column;
        }

        @include media-orientation($orientation, variables.$app-orientations) {
            // Provide basic `.col-{bp}` classes for equal-width flexbox columns
            .col#{$infix} {
                flex-basis: 0;
                flex-grow: 1;
                max-width: 100%;
            }

            @if $grid-row-columns > 0 {
                @for $i from 1 through $grid-row-columns {
                    .row-cols#{$infix}-#{$i} {
                        @include row-cols($i);
                    }
                }
            }

            .col#{$infix}-auto {
                @include make-col-auto();
            }

            @if $columns > 0 {
                @for $i from 1 through $columns {
                    .col#{$infix}-#{$i} {
                        @include make-col($i, $columns);
                    }
                }
            }

            .order#{$infix}-first {
                order: -1;
            }

            .order#{$infix}-last {
                order: $columns + 1;
            }

            @for $i from 0 through $columns {
                .order#{$infix}-#{$i} {
                    order: $i;
                }
            }

            @if $columns > 0 {
                // `$columns - 1` because offsetting by the width of an entire row isn't possible
                @for $i from 0 through ($columns - 1) {
                    @if not($infix == "" and $i == 0) {
                        // Avoid emitting useless .offset-0
                        .offset#{$infix}-#{$i} {
                            @include make-col-offset($i, $columns);
                        }
                    }
                }
            }
        }
    }
}

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

// Single container class with breakpoint max-widths
.container,
// 100% wide container at all breakpoints
.container-fluid {
    @include make-container();
}

// // Responsive containers that are 100% wide until a breakpoint
// @each $breakpoint, $container-max-width in $container-max-widths {
//   .container-#{$breakpoint} {
//     @extend .container-fluid;
//   }

//   @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
//     %responsive-container-#{$breakpoint} {
//       max-width: $container-max-width;
//     }

//     // Extend each breakpoint which is smaller or equal to the current breakpoint
//     $extend-breakpoint: true;

//     @each $name, $width in $grid-breakpoints {
//       @if ($extend-breakpoint) {
//         .container#{breakpoint-infix($name, $grid-breakpoints)} {
//           @extend %responsive-container-#{$breakpoint};
//         }

//         // Once the current breakpoint is reached, stop extending
//         @if ($breakpoint == $name) {
//           $extend-breakpoint: false;
//         }
//       }
//     }
//   }
// }

// Columns
//
// Common styles for small and large grid columns

@include make-grid-columns();
